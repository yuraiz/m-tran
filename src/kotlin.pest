WHITESPACE = _{ " " | NEWLINE }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE) }

ident = @{ ASCII_ALPHA ~ ASCII_ALPHANUMERIC+ }
type = @{ ident ~ ("<" ~ type ~ ">")? }

program = _{ SOI ~ fun+ ~ EOI }

// LITERALS
literal = { char | str | int | bool }

    escaped_char = _{"\\" ~ ("t" | "b" | "n" | "r" | "'" | "\"" | "\\" | "$")}

    char = @{ "'" ~ (!"'" ~ (escaped_char | (!"\\" ~ ANY))) ~ "'" }

    str = @{ "\"" ~ (!"\"" ~ (escaped_char | (!"\\" ~ ANY)))* ~ "\"" }

    int = { decimal | hexadecimal | binary }
        decimal = @{ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ | ASCII_DIGIT }
        hexadecimal = @{ "0x" ~ ASCII_HEX_DIGIT+ }
        binary = @{ "0b" ~ ASCII_BIN_DIGIT+ }

    bool = { "true" | "false" }

// FUNCTION DEFENITION
fun = { "fun" ~ ident ~ "(" ~ ((func_arg ~ ",")* ~ func_arg)? ~ ")" ~ (":" ~ type)? ~ (scope | "=" ~ expr) }

    func_arg = { ident ~ ":" ~ type }
    scope = { "{" ~ top_expr* ~ "}" }

// EXPRESSIONS
expr = { top_expr | math_expr | short_expr }
    top_expr = { control_exp | binding | set | call }

    short_expr = _{ literal | ident }

    call = { ident ~ "(" ~ args? ~ ")" }
        args = { (expr ~ "," )* ~ expr }


// Control expressions
control_exp = _{if | for | return}

    if = { "if" ~ "(" ~ expr ~ ")" ~ (scope | expr) ~ else? }
        else = { "else" ~ (scope | expr)  }

    return = { "return" ~ (!return ~ expr)? }

    for = { "for" ~ "(" ~ ident ~"in" ~ expr ~ ")" ~ scope }

    while = { "while" ~ "(" ~ expr ~ ")" ~ scope }

// OPERATORS

math_expr = { prefix* ~ primary ~ (infix ~ prefix* ~ primary )* }

infix    =  _{ add | sub | mul | div | range | cmp }
    // basic
    add = { "+" }
    sub = { "-" }
    mul = { "*" }
    div = { "/" }
    mod = { "%" } 

    range = { ".." }

    cmp = { langle | rangle }

    langle = { "<" }
    rangle = { ">" }

prefix = _{ neg | bool_neg }
    neg = { "-" } // Negation
    bool_neg = { "!" }
primary = _{ call | short_expr | "(" ~ expr ~ ")" }

set = { ident ~ "=" ~ expr }
set_by_index = { ident ~ "[" ~ expr ~ "]" ~ "=" ~ expr} 

// BINDINGS
binding = { var | val }
    var = { "var" ~ ident ~ "=" ~ expr }
    val = { "val" ~ ident ~ "=" ~ expr }